---
title: "Time Series Forecasting"
subtitle: "Forecasting new car sales in Norway"
author:
- name: Tsang Hui Wing 
date: "March 2024"
output:
  html_document:
    toc: true
    toc_float: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## 1. Introduction 

**The following project is about modeling new cars sales in Norway, with the goal of forecasting the sales for the future.
The time series modeling will be performed by Prophet by Facebook Meta.**

<center>
![](ProphetLogo.png)
</center>

### 1.1 Time Series 
A Time Series is a time-indexed series of data. Therefore, the data is organized by relatively deterministic time stamps, and may, compared to random sample data. In Finance, a time series tracks the movement of the chosen data points, such as a security’s price, over a specified period of time with data points recorded at regular intervals.

<center>
![](ts.jpeg){width=65%}
</center>


### 1.2 Prophet
Prophet package is a very powerful forecasting package, especially for people who don't necessarily know all the time series econometrics. It is typically used for business analytics purposes in forecasting sales and volumes or other business-related forecasts, primarily those that exhibit a lot of seasonality a lot of trends and thrifts. Check [here](https://facebook.github.io/prophet/docs/quick_start.html#r-api) for more details on prophet.

<center>
![](prophet forecast.png){width=70%}
</center>



## 2. Dataset

### 2.1 Data


```{r echo=TRUE, message=FALSE, warning=FALSE}
#Install necessary libraries
library(tidyverse)
library(lubridate)
library(tidymodels)
library(prophet)
```


```{r echo=TRUE, message=FALSE, warning=FALSE}
#Load the dataset
car_sales <- read_csv("norway_new_car_sales_by_month.csv")
view(car_sales)
```


We can see that the data frame contains lots of columns. For our case we will just focus on the columns 'date' and 'quantity'.


```{r echo=TRUE, message=FALSE, warning=FALSE}
#Do some plots
car_sales %>% mutate(Date=as.Date(paste(Year, Month, "1", sep="-"))) %>% 
  select(Date, Quantity) %>% 
  gather(key=type, value=value, -Date) %>% 
  ggplot()+
  geom_line(mapping = aes(x=Date, y=value/10^3, color=type), size=1)+
  labs(y="Sales, in thousands",
       x=NULL,
       color=NULL,
       title="Car sales in Norway")
```

We can see an emerging trend with the sales and some monthly or seasonal components. We can also see a massive drop due to the 2007–2008 financial crisis. Seasonality is evident in the time series. 

### 2.2 Further analysis

Upon close inspection of my data, I could gain some insight into the trends of the type of new cars sold. Particularly, I found the quantity of diesel cars sold for the past years interesting.

```{r echo=TRUE, message=FALSE, warning=FALSE}
car_sales %>% mutate(Date=as.Date(paste(Year, Month, "1", sep="-"))) %>% 
  select(Date, Quantity_Diesel) %>% 
  gather(key=type, value=value, -Date) %>% 
  ggplot()+
  geom_line(mapping = aes(x=Date, y=value/10^3, color=type), size=1)+
  labs(y="Sales, in thousands",
       x=NULL,
       color=NULL,
       title="Diesel Car sales in Norway")+
  scale_colour_manual(values = "darkblue")
```

We can see the sales for diesel cars has been decreasing for the past five years, while the total new car sales have been increasing. This also highlights the effectiveness of Norway's tax policy on fossil fuel automobiles, where high pollutant emitters like diesel cars have a higher purchasing tax rate. We can then also forecast the sales of diesel cars and compare with the total car sales forecast.

### 2.3 Forecasting

We will use this data to forecast the next two years car sales.

#### Converting data to time series

```{r echo=TRUE, message=FALSE, warning=FALSE}
#Selecting two columns from data
car_sales_data <-car_sales %>% mutate(Date=as.Date(paste(Year, Month, "1", sep="-"))) %>%
  select(Date, Quantity)
#Convert character string column to date
car_sales_data$date <- as.Date(car_sales_data$Date) 
```

```{r echo=TRUE, message=FALSE, warning=FALSE}
#Install and load "xts" package
library(xts)
```

```{r echo=TRUE, message=FALSE, warning=FALSE}
#Convert dataframe to time series
car_sales_data_ts <- xts(car_sales_data$Quantity, car_sales_data$date)
```

```{r echo=TRUE, message=FALSE, warning=FALSE}
#Check class of time series
class(car_sales_data_ts)
```

```{r}
head(car_sales_data_ts)
```

We can see our time series columns clear and nice.

### 2.4 Using Prophet

In order to use `prophet()`, we need to replace dates for ds and quantity for y. To access times in time series, use `time()`. To covert it to a vector of dates, use `yearmon()`.

```{r echo=TRUE, message=FALSE, warning=FALSE}
#Create a dataframe
car_sales.df = data.frame(ds=zoo::as.yearmon(time(car_sales_data_ts)), y=car_sales_data$Quantity)

```


We can plot our dataframe and compare a linear model with it.

```{r echo=TRUE, message=FALSE, warning=FALSE}
car_sales.df %>% 
  ggplot(aes(x = ds, y = y)) + 
  geom_line() + 
  geom_smooth(method = "lm")
```

The average with the linear model shows this trend is increasing through time. But that will be a problem when we are forecasting a non-stationary average. Prophet, on the other hand, does not need to have an assumption of stationary or non stationary data.


Fit that dataframe to Prophet
```{r echo=TRUE, message=FALSE, warning=FALSE}
model = prophet::prophet(car_sales.df)
```

We use this model to create what we want to forecast.
```{r echo=TRUE, message=FALSE, warning=FALSE}
future = prophet::make_future_dataframe(model, periods=8, freq="quarter")
#Run predict function
forecast = predict(model, future)
```

## 3. Forecasting Results

### 3.1 Forecast

```{r echo=TRUE, message=FALSE, warning=FALSE}
#Plot to display forecast
plot(model,forecast)
```

You can see its fitting the model pretty well. The last part is what we are trying to forecast. We can forecast the car sales are going to slowly increase during 2017 and drop in 2018. In general, the car sales in Norway for the coming years will be increasing. We can predict the new car sales would be around 13,000 at the start of 2018.

### 3.2 Further analysis

We can do the same thing to forecast the sales for diesel cars for comparison.

```{r echo=TRUE, message=FALSE, warning=FALSE}
diesel_car_sales_data <-car_sales %>% mutate(Date=as.Date(paste(Year, Month, "1", sep="-"))) %>%
  select(Date, Quantity_Diesel)
diesel_car_sales_data$date <- as.Date(diesel_car_sales_data$Date) 
diesel_car_sales_data_ts <- xts(diesel_car_sales_data$Quantity_Diesel, diesel_car_sales_data$date)
diesel_car_sales.df = data.frame(ds=zoo::as.yearmon(time(diesel_car_sales_data_ts)), y=diesel_car_sales_data$Quantity_Diesel)
```


Fit that data frame to Prophet


```{r echo=TRUE, message=FALSE, warning=FALSE}
model_diesel = prophet::prophet(diesel_car_sales.df)
future_diesel = prophet::make_future_dataframe(model_diesel, periods=8, freq="quarter")
forecast_diesel = predict(model_diesel, future_diesel)
plot(model_diesel,forecast_diesel)
```

The number of new diesel car sales are expected to continue decreasing, as shown in the forecast. Particularly, the new diesel car sales is predicted to be around 2,800 at the start of 2018, which would represent 21.5% of the total car sales.


### 3.3 Components

Let's plot the components and see whats driving our new cars sales trend.

```{r echo=TRUE, message=FALSE, warning=FALSE}
prophet_plot_components(model, forecast)
```

We can see an increasing trend value over time.
In terms of yearly component, an increasing trend can be seen from the first quarter, while sales decrease for the second quarter, and for the rest of the year it stays around same level.


### 3.4 Change points

We can also add change points to show where is it changing in the trend and that can help diagnose any weird changes on the data. As well as, for prophet we can specify specific change point in the future.


```{r echo=TRUE, message=FALSE, warning=FALSE}
plot(model, forecast) + 
  add_changepoints_to_plot(model)
```

We can see most of the change points are between 2008 to 2010 due to the low demand for new cars during and after the financial crisis. 

### 3.5 Comparing different forecasts

#### 3.5.1 Holiday component

We can use `add_country_holidays` to include Norway's national holidays effect in the forecast.

```{r echo=TRUE, message=FALSE, warning=FALSE}
model2 <- prophet()
model2 <- add_country_holidays(model2, country_name = 'NO')
model2 <- fit.prophet(model2, car_sales.df)
future2 = make_future_dataframe(model2, periods=8, freq="quarter")
forecast2 = predict(model2, future2)
plot(model2,forecast2)
prophet_plot_components(model2, forecast2)
```

From the components plot, we can see the holidays have an negative effect in 2009 and a positive effect in 2013. For which, showing two spikes on the graphs. Minor effects can be seen on the forecast.

#### 3.5.2 Changing the holiday prior scale component

We can also change `holiday.prior.scale` to regularized the holiday effects.

```{r echo=TRUE, message=FALSE, warning=FALSE}
model2_adjusted <- prophet(holidays.prior.scale = 0.05)
model2_adjusted <- add_country_holidays(model2_adjusted, country_name = 'NO')
model2_adjusted <- fit.prophet(model2_adjusted, car_sales.df)
future2_adjusted = prophet::make_future_dataframe(model2_adjusted, periods=8, freq="quarter")
forecast2_adjusted = predict(model2_adjusted, future2_adjusted)
plot(model2_adjusted,forecast2_adjusted)
```

We used `holidays.prior.scale = 0.05` to dampen the holiday effects. As you can see the forecast line did not take account to negative effect of holiday events during 2009 and the spike during 2013.

#### 3.5.3 Changing the changepoint prior scale compoonent

To adjust the flexibility of the trend, we can use `changepoint.prior.scale`. Particularly, increasing the scale would result in more change points, and vice versa.

```{r echo=TRUE, message=FALSE, warning=FALSE}
model1_adjusted <- prophet(car_sales.df, changepoint.prior.scale = 0.5)
future1_adjusted = make_future_dataframe(model1_adjusted, periods=8, freq="quarter")
forecast1_adjusted = predict(model1_adjusted, future1_adjusted)
plot(model1_adjusted, forecast1_adjusted) + 
  add_changepoints_to_plot(model1_adjusted)
```

We increased the scale to make the trend more flexible. This allowed the trend to fit closer to the data points. However, it might have also resulted in overfitting, specifically around 2008-2009, where the dip in sales was a result of the global financial crisis. Because of this, the forecast can also be seen to be more volatile. 


## 4. Conclusion

This project attempted to use Prophet for forecasting the new car sales in Norway between 2017-2019. While the total car sales were predicted to continue increasing steadily, certain vehicle types such as diesel were expected to decrease instead, reflecting the effects of Norway's tax policy on high pollution vehicles. Within the model, seasonality changes were also considered. To further refine the model, the national holidays of Norway were included and regularised with a prior scale. Similarly, the prior scale of changepoints were also adjusted to tweak the flexibility of the trend.

Overall, Meta's Prophet was able to successfully model and forecast the new car sales in Norway. Further work could explore alternatives in refining components to improve the forecast.

